/*
 * Permission Management API documentation
 *
 * This is an API for managing application permissions.
 *
 * OpenAPI spec version: 1.0.0-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Security;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class ManagementAPIApiController : ControllerBase
    { 
        /// <summary>
        /// Unregister Application
        /// </summary>
        /// <remarks>Delete/unregister application</remarks>
        /// <param name="appId">Application Id.</param>
        /// <response code="200">OK</response>
        /// <response code="400">Invalid syntax</response>
        /// <response code="401">Authorization key is missing or invalid</response>
        /// <response code="404">Requested resource not found</response>
        /// <response code="405">Requested method not allowed</response>
        /// <response code="500">Internal server error</response>
        [HttpDelete]
        [Route("/polarfox/AuthAPI/1.0.0/application/{appId}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteApplication")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Invalid syntax")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Authorization key is missing or invalid")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "Requested resource not found")]
        [SwaggerResponse(statusCode: 405, type: typeof(Error), description: "Requested method not allowed")]
        [SwaggerResponse(statusCode: 500, type: typeof(Error), description: "Internal server error")]
        public virtual IActionResult DeleteApplication([FromRoute][Required] [MinLength(10)]string appId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error));

            //TODO: Uncomment the next line to return response 405 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(405, default(Error));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Error));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Delete Permission from Role
        /// </summary>
        /// <remarks>Delete Permission from Role</remarks>
        /// <param name="roleId">Role Id.</param>
        /// <param name="entity">The entity name</param>
        /// <param name="action">The action name</param>
        /// <response code="200">OK</response>
        /// <response code="400">Invalid syntax</response>
        /// <response code="401">Authorization key is missing or invalid</response>
        /// <response code="404">Requested resource not found</response>
        /// <response code="405">Requested method not allowed</response>
        /// <response code="500">Internal server error</response>
        [HttpDelete]
        [Route("/polarfox/AuthAPI/1.0.0/permissions/{roleId}")]
        [ValidateModelState]
        [SwaggerOperation("DeletePermissiom")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Invalid syntax")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Authorization key is missing or invalid")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "Requested resource not found")]
        [SwaggerResponse(statusCode: 405, type: typeof(Error), description: "Requested method not allowed")]
        [SwaggerResponse(statusCode: 500, type: typeof(Error), description: "Internal server error")]
        public virtual IActionResult DeletePermissiom([FromRoute][Required] [MinLength(10)]string roleId, [FromQuery][Required()]string entity, [FromQuery][Required()]string action)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error));

            //TODO: Uncomment the next line to return response 405 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(405, default(Error));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Error));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Delete Role from Application
        /// </summary>
        /// <remarks>Delete Role from Application</remarks>
        /// <param name="roleId">Role Id.</param>
        /// <response code="200">OK</response>
        /// <response code="400">Invalid syntax</response>
        /// <response code="401">Authorization key is missing or invalid</response>
        /// <response code="404">Requested resource not found</response>
        /// <response code="405">Requested method not allowed</response>
        /// <response code="500">Internal server error</response>
        [HttpDelete]
        [Route("/polarfox/AuthAPI/1.0.0/roles/{roleId}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteRole")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Invalid syntax")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Authorization key is missing or invalid")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "Requested resource not found")]
        [SwaggerResponse(statusCode: 405, type: typeof(Error), description: "Requested method not allowed")]
        [SwaggerResponse(statusCode: 500, type: typeof(Error), description: "Internal server error")]
        public virtual IActionResult DeleteRole([FromRoute][Required] [MinLength(10)]string roleId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error));

            //TODO: Uncomment the next line to return response 405 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(405, default(Error));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Error));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Gets list of Applications
        /// </summary>
        /// <remarks>Get applications available to current user.</remarks>
        /// <response code="200">OK</response>
        /// <response code="400">Invalid syntax</response>
        /// <response code="401">Authorization key is missing or invalid</response>
        /// <response code="405">Requested method not allowed</response>
        /// <response code="500">Internal server error</response>
        [HttpGet]
        [Route("/polarfox/AuthAPI/1.0.0/applications")]
        [ValidateModelState]
        [SwaggerOperation("GetApplications")]
        [SwaggerResponse(statusCode: 200, type: typeof(InlineResponse200), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Invalid syntax")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Authorization key is missing or invalid")]
        [SwaggerResponse(statusCode: 405, type: typeof(Error), description: "Requested method not allowed")]
        [SwaggerResponse(statusCode: 500, type: typeof(Error), description: "Internal server error")]
        public virtual IActionResult GetApplications()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(InlineResponse200));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));

            //TODO: Uncomment the next line to return response 405 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(405, default(Error));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"data\" : [ {\n    \"permissions\" : [ {\n      \"entityType\" : \"Contract\",\n      \"description\" : \"description\",\n      \"entityId\" : \"entityId\",\n      \"id\" : \"id\",\n      \"applicationId\" : \"applicationId\",\n      \"operation\" : \"Edit\"\n    }, {\n      \"entityType\" : \"Contract\",\n      \"description\" : \"description\",\n      \"entityId\" : \"entityId\",\n      \"id\" : \"id\",\n      \"applicationId\" : \"applicationId\",\n      \"operation\" : \"Edit\"\n    } ],\n    \"name\" : \"name\",\n    \"description\" : \"description\",\n    \"id\" : \"id\"\n  }, {\n    \"permissions\" : [ {\n      \"entityType\" : \"Contract\",\n      \"description\" : \"description\",\n      \"entityId\" : \"entityId\",\n      \"id\" : \"id\",\n      \"applicationId\" : \"applicationId\",\n      \"operation\" : \"Edit\"\n    }, {\n      \"entityType\" : \"Contract\",\n      \"description\" : \"description\",\n      \"entityId\" : \"entityId\",\n      \"id\" : \"id\",\n      \"applicationId\" : \"applicationId\",\n      \"operation\" : \"Edit\"\n    } ],\n    \"name\" : \"name\",\n    \"description\" : \"description\",\n    \"id\" : \"id\"\n  } ]\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<InlineResponse200>(exampleJson)
                        : default(InlineResponse200);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets Role Permissions
        /// </summary>
        /// <remarks>Gets Role Permissions</remarks>
        /// <param name="roleId">Role Id.</param>
        /// <response code="200">OK</response>
        /// <response code="400">Invalid syntax</response>
        /// <response code="401">Authorization key is missing or invalid</response>
        /// <response code="405">Requested method not allowed</response>
        /// <response code="500">Internal server error</response>
        [HttpGet]
        [Route("/polarfox/AuthAPI/1.0.0/permissions/{roleId}")]
        [ValidateModelState]
        [SwaggerOperation("GetRolePermissions")]
        [SwaggerResponse(statusCode: 200, type: typeof(InlineResponse2002), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Invalid syntax")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Authorization key is missing or invalid")]
        [SwaggerResponse(statusCode: 405, type: typeof(Error), description: "Requested method not allowed")]
        [SwaggerResponse(statusCode: 500, type: typeof(Error), description: "Internal server error")]
        public virtual IActionResult GetRolePermissions([FromRoute][Required] [MinLength(10)]string roleId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(InlineResponse2002));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));

            //TODO: Uncomment the next line to return response 405 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(405, default(Error));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"data\" : [ {\n    \"entityType\" : \"Contract\",\n    \"description\" : \"description\",\n    \"entityId\" : \"entityId\",\n    \"id\" : \"id\",\n    \"applicationId\" : \"applicationId\",\n    \"operation\" : \"Edit\"\n  }, {\n    \"entityType\" : \"Contract\",\n    \"description\" : \"description\",\n    \"entityId\" : \"entityId\",\n    \"id\" : \"id\",\n    \"applicationId\" : \"applicationId\",\n    \"operation\" : \"Edit\"\n  } ]\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<InlineResponse2002>(exampleJson)
                        : default(InlineResponse2002);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets available Roles in Application
        /// </summary>
        /// <remarks>Get roles for current user in specified application.</remarks>
        /// <response code="200">OK</response>
        /// <response code="400">Invalid syntax</response>
        /// <response code="401">Authorization key is missing or invalid</response>
        /// <response code="405">Requested method not allowed</response>
        /// <response code="500">Internal server error</response>
        [HttpGet]
        [Route("/polarfox/AuthAPI/1.0.0/roles")]
        [ValidateModelState]
        [SwaggerOperation("GetRoles")]
        [SwaggerResponse(statusCode: 200, type: typeof(InlineResponse2001), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Invalid syntax")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Authorization key is missing or invalid")]
        [SwaggerResponse(statusCode: 405, type: typeof(Error), description: "Requested method not allowed")]
        [SwaggerResponse(statusCode: 500, type: typeof(Error), description: "Internal server error")]
        public virtual IActionResult GetRoles()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(InlineResponse2001));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));

            //TODO: Uncomment the next line to return response 405 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(405, default(Error));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"data\" : [ {\n    \"roleId\" : \"roleId\",\n    \"permissions\" : [ {\n      \"entityType\" : \"Contract\",\n      \"description\" : \"description\",\n      \"entityId\" : \"entityId\",\n      \"id\" : \"id\",\n      \"applicationId\" : \"applicationId\",\n      \"operation\" : \"Edit\"\n    }, {\n      \"entityType\" : \"Contract\",\n      \"description\" : \"description\",\n      \"entityId\" : \"entityId\",\n      \"id\" : \"id\",\n      \"applicationId\" : \"applicationId\",\n      \"operation\" : \"Edit\"\n    } ],\n    \"name\" : \"name\",\n    \"description\" : \"description\",\n    \"type\" : \"customerRole\",\n    \"entityLevelAccess\" : true\n  }, {\n    \"roleId\" : \"roleId\",\n    \"permissions\" : [ {\n      \"entityType\" : \"Contract\",\n      \"description\" : \"description\",\n      \"entityId\" : \"entityId\",\n      \"id\" : \"id\",\n      \"applicationId\" : \"applicationId\",\n      \"operation\" : \"Edit\"\n    }, {\n      \"entityType\" : \"Contract\",\n      \"description\" : \"description\",\n      \"entityId\" : \"entityId\",\n      \"id\" : \"id\",\n      \"applicationId\" : \"applicationId\",\n      \"operation\" : \"Edit\"\n    } ],\n    \"name\" : \"name\",\n    \"description\" : \"description\",\n    \"type\" : \"customerRole\",\n    \"entityLevelAccess\" : true\n  } ]\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<InlineResponse2001>(exampleJson)
                        : default(InlineResponse2001);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Register new Application
        /// </summary>
        /// <remarks>Register new application in application list</remarks>
        /// <param name="body"></param>
        /// <response code="200">OK</response>
        /// <response code="400">Invalid syntax</response>
        /// <response code="401">Authorization key is missing or invalid</response>
        /// <response code="405">Requested method not allowed</response>
        /// <response code="500">Internal server error</response>
        [HttpPut]
        [Route("/polarfox/AuthAPI/1.0.0/applications")]
        [ValidateModelState]
        [SwaggerOperation("InsertApplication")]
        [SwaggerResponse(statusCode: 200, type: typeof(Application), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Invalid syntax")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Authorization key is missing or invalid")]
        [SwaggerResponse(statusCode: 405, type: typeof(Error), description: "Requested method not allowed")]
        [SwaggerResponse(statusCode: 500, type: typeof(Error), description: "Internal server error")]
        public virtual IActionResult InsertApplication([FromBody]Application body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Application));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));

            //TODO: Uncomment the next line to return response 405 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(405, default(Error));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"permissions\" : [ {\n    \"entityType\" : \"Contract\",\n    \"description\" : \"description\",\n    \"entityId\" : \"entityId\",\n    \"id\" : \"id\",\n    \"applicationId\" : \"applicationId\",\n    \"operation\" : \"Edit\"\n  }, {\n    \"entityType\" : \"Contract\",\n    \"description\" : \"description\",\n    \"entityId\" : \"entityId\",\n    \"id\" : \"id\",\n    \"applicationId\" : \"applicationId\",\n    \"operation\" : \"Edit\"\n  } ],\n  \"name\" : \"name\",\n  \"description\" : \"description\",\n  \"id\" : \"id\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Application>(exampleJson)
                        : default(Application);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Add new Role to Application
        /// </summary>
        /// <remarks>Add new Role to Application</remarks>
        /// <param name="body"></param>
        /// <response code="200">OK</response>
        /// <response code="400">Invalid syntax</response>
        /// <response code="401">Authorization key is missing or invalid</response>
        /// <response code="405">Requested method not allowed</response>
        /// <response code="500">Internal server error</response>
        [HttpPut]
        [Route("/polarfox/AuthAPI/1.0.0/roles")]
        [ValidateModelState]
        [SwaggerOperation("InsertRole")]
        [SwaggerResponse(statusCode: 200, type: typeof(Role), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Invalid syntax")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Authorization key is missing or invalid")]
        [SwaggerResponse(statusCode: 405, type: typeof(Error), description: "Requested method not allowed")]
        [SwaggerResponse(statusCode: 500, type: typeof(Error), description: "Internal server error")]
        public virtual IActionResult InsertRole([FromBody]Role body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Role));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));

            //TODO: Uncomment the next line to return response 405 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(405, default(Error));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"roleId\" : \"roleId\",\n  \"permissions\" : [ {\n    \"entityType\" : \"Contract\",\n    \"description\" : \"description\",\n    \"entityId\" : \"entityId\",\n    \"id\" : \"id\",\n    \"applicationId\" : \"applicationId\",\n    \"operation\" : \"Edit\"\n  }, {\n    \"entityType\" : \"Contract\",\n    \"description\" : \"description\",\n    \"entityId\" : \"entityId\",\n    \"id\" : \"id\",\n    \"applicationId\" : \"applicationId\",\n    \"operation\" : \"Edit\"\n  } ],\n  \"name\" : \"name\",\n  \"description\" : \"description\",\n  \"type\" : \"customerRole\",\n  \"entityLevelAccess\" : true\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Role>(exampleJson)
                        : default(Role);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Add Permission to Role
        /// </summary>
        /// <remarks>Add Permission to Role</remarks>
        /// <param name="body"></param>
        /// <param name="roleId">Role Id.</param>
        /// <response code="200">OK</response>
        /// <response code="400">Invalid syntax</response>
        /// <response code="401">Authorization key is missing or invalid</response>
        /// <response code="404">Requested resource not found</response>
        /// <response code="405">Requested method not allowed</response>
        /// <response code="500">Internal server error</response>
        [HttpPut]
        [Route("/polarfox/AuthAPI/1.0.0/permissions/{roleId}")]
        [ValidateModelState]
        [SwaggerOperation("InsertRolePermissions")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Invalid syntax")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Authorization key is missing or invalid")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "Requested resource not found")]
        [SwaggerResponse(statusCode: 405, type: typeof(Error), description: "Requested method not allowed")]
        [SwaggerResponse(statusCode: 500, type: typeof(Error), description: "Internal server error")]
        public virtual IActionResult InsertRolePermissions([FromBody]Permission body, [FromRoute][Required] [MinLength(10)]string roleId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error));

            //TODO: Uncomment the next line to return response 405 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(405, default(Error));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Error));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Post update to Application
        /// </summary>
        /// <remarks>Post update to Application</remarks>
        /// <param name="body"></param>
        /// <param name="appId">Application Id.</param>
        /// <response code="200">OK</response>
        /// <response code="400">Invalid syntax</response>
        /// <response code="401">Authorization key is missing or invalid</response>
        /// <response code="404">Requested resource not found</response>
        /// <response code="405">Requested method not allowed</response>
        /// <response code="500">Internal server error</response>
        [HttpPost]
        [Route("/polarfox/AuthAPI/1.0.0/application/{appId}")]
        [ValidateModelState]
        [SwaggerOperation("UpdateApplication")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Invalid syntax")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Authorization key is missing or invalid")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "Requested resource not found")]
        [SwaggerResponse(statusCode: 405, type: typeof(Error), description: "Requested method not allowed")]
        [SwaggerResponse(statusCode: 500, type: typeof(Error), description: "Internal server error")]
        public virtual IActionResult UpdateApplication([FromBody]Application body, [FromRoute][Required] [MinLength(10)]string appId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error));

            //TODO: Uncomment the next line to return response 405 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(405, default(Error));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Error));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Post update to Role
        /// </summary>
        /// <remarks>Post update to Role</remarks>
        /// <param name="body"></param>
        /// <param name="roleId">Role Id.</param>
        /// <response code="200">OK</response>
        /// <response code="400">Invalid syntax</response>
        /// <response code="401">Authorization key is missing or invalid</response>
        /// <response code="404">Requested resource not found</response>
        /// <response code="405">Requested method not allowed</response>
        /// <response code="500">Internal server error</response>
        [HttpPost]
        [Route("/polarfox/AuthAPI/1.0.0/roles/{roleId}")]
        [ValidateModelState]
        [SwaggerOperation("UpdateRole")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Invalid syntax")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Authorization key is missing or invalid")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "Requested resource not found")]
        [SwaggerResponse(statusCode: 405, type: typeof(Error), description: "Requested method not allowed")]
        [SwaggerResponse(statusCode: 500, type: typeof(Error), description: "Internal server error")]
        public virtual IActionResult UpdateRole([FromBody]Role body, [FromRoute][Required] [MinLength(10)]string roleId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error));

            //TODO: Uncomment the next line to return response 405 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(405, default(Error));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Error));

            throw new NotImplementedException();
        }
    }
}
